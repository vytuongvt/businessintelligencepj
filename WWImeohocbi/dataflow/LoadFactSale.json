{
	"name": "LoadFactSale",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "stgInvoice",
						"type": "DatasetReference"
					},
					"name": "stginvoice"
				},
				{
					"dataset": {
						"referenceName": "stginvoiceline",
						"type": "DatasetReference"
					},
					"name": "stgInvoiceLine"
				},
				{
					"dataset": {
						"referenceName": "dimstockitem",
						"type": "DatasetReference"
					},
					"name": "dimStockItem"
				},
				{
					"dataset": {
						"referenceName": "dimsaleperson",
						"type": "DatasetReference"
					},
					"name": "dimSaleperson"
				},
				{
					"dataset": {
						"referenceName": "dimArea",
						"type": "DatasetReference"
					},
					"name": "dimarea"
				},
				{
					"dataset": {
						"referenceName": "dimcustomer",
						"type": "DatasetReference"
					},
					"name": "dimCustomer"
				},
				{
					"dataset": {
						"referenceName": "DimDate",
						"type": "DatasetReference"
					},
					"name": "dimdate"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "factSale",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "joinIVvsIVL"
				},
				{
					"name": "select1"
				},
				{
					"name": "getStockItemKey"
				},
				{
					"name": "select2"
				},
				{
					"name": "getSalepersonKey"
				},
				{
					"name": "select3"
				},
				{
					"name": "GetCustomerkey"
				},
				{
					"name": "select4"
				},
				{
					"name": "select5"
				},
				{
					"name": "addMeasure"
				},
				{
					"name": "covertDate"
				},
				{
					"name": "GetCityKey"
				},
				{
					"name": "GetDateKey"
				},
				{
					"name": "select6"
				},
				{
					"name": "GetSaleKey"
				}
			],
			"scriptLines": [
				"source(output(",
				"          InvoiceID as integer,",
				"          CustomerID as integer,",
				"          BillToCustomerID as integer,",
				"          OrderID as integer,",
				"          DeliveryMethodID as integer,",
				"          ContactPersonID as integer,",
				"          AccountsPersonID as integer,",
				"          SalespersonPersonID as integer,",
				"          PackedByPersonID as integer,",
				"          InvoiceDate as date,",
				"          CustomerPurchaseOrderNumber as string,",
				"          IsCreditNote as boolean,",
				"          CreditNoteReason as string,",
				"          Comments as string,",
				"          DeliveryInstructions as string,",
				"          InternalComments as string,",
				"          TotalDryItems as integer,",
				"          TotalChillerItems as integer,",
				"          DeliveryRun as string,",
				"          RunPosition as string,",
				"          ReturnedDeliveryData as string,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stginvoice",
				"source(output(",
				"          InvoiceLineID as integer,",
				"          InvoiceID as integer,",
				"          StockItemID as integer,",
				"          Description as string,",
				"          PackageTypeID as integer,",
				"          Quantity as integer,",
				"          UnitPrice as decimal(18,2),",
				"          TaxRate as decimal(18,3),",
				"          TaxAmount as decimal(18,2),",
				"          LineProfit as decimal(18,2),",
				"          ExtendedPrice as decimal(18,2),",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> stgInvoiceLine",
				"source(output(",
				"          StockItemKey as integer,",
				"          WWIStockItemID as integer,",
				"          StockItem as string,",
				"          SellingPackage as string,",
				"          BuyingPackage as string,",
				"          Brand as string,",
				"          Barcode as string,",
				"          QuantityPerOuter as integer,",
				"          TaxRate as decimal(18,3),",
				"          UnitPrice as decimal(18,2),",
				"          RecommendedRetailPrice as decimal(18,2),",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimStockItem",
				"source(output(",
				"          SalespersonKey as integer,",
				"          WWISalesPersonID as integer,",
				"          FullName as string,",
				"          PhoneNumber as string,",
				"          EmailAddress as string,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimSaleperson",
				"source(output(",
				"          CityKey as integer,",
				"          WWICityID as integer,",
				"          StateProvince as string,",
				"          Country as string,",
				"          SalesTerritory as string,",
				"          Region as string,",
				"          Subregion as string,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimarea",
				"source(output(",
				"          CustomerKey as integer,",
				"          WWICustomerID as integer,",
				"          Customer as string,",
				"          PhoneNumber as string,",
				"          DeliveryPostalCode as string,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          CustomerCategory as string,",
				"          DeliveryCityID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimCustomer",
				"source(output(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          Day as integer,",
				"          Month as integer,",
				"          Quarter as integer,",
				"          Year as integer,",
				"          Weekday as integer,",
				"          Week as integer,",
				"          DayName as string,",
				"          MonthName as string,",
				"          QuarterName as string,",
				"          IsWeekend as boolean,",
				"          IsHoliday as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dimdate",
				"stginvoice, stgInvoiceLine join(stginvoice@InvoiceID == stgInvoiceLine@InvoiceID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinIVvsIVL",
				"joinIVvsIVL select(mapColumn(",
				"          InvoiceID = stginvoice@InvoiceID,",
				"          CustomerID,",
				"          BillToCustomerID,",
				"          OrderID,",
				"          SalespersonPersonID,",
				"          InvoiceDate,",
				"          InvoiceID = stgInvoiceLine@InvoiceID,",
				"          StockItemID,",
				"          Quantity,",
				"          UnitPrice,",
				"          TaxRate,",
				"          TaxAmount,",
				"          LineProfit",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, dimStockItem lookup(StockItemID == WWIStockItemID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> getStockItemKey",
				"getStockItemKey select(mapColumn(",
				"          InvoiceID,",
				"          CustomerID,",
				"          BillToCustomerID,",
				"          OrderID,",
				"          SalespersonPersonID,",
				"          InvoiceDate,",
				"          Quantity,",
				"          UnitPrice = select1@UnitPrice,",
				"          TaxRate = select1@TaxRate,",
				"          TaxAmount,",
				"          LineProfit,",
				"          StockItemKey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2, dimSaleperson lookup(SalespersonPersonID == WWISalesPersonID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> getSalepersonKey",
				"getSalepersonKey select(mapColumn(",
				"          InvoiceID,",
				"          CustomerID,",
				"          BillToCustomerID,",
				"          OrderID,",
				"          InvoiceDate,",
				"          Quantity,",
				"          UnitPrice,",
				"          TaxRate,",
				"          TaxAmount,",
				"          LineProfit,",
				"          StockItemKey,",
				"          SalespersonKey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3, dimCustomer lookup(CustomerID == WWICustomerID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> GetCustomerkey",
				"GetCustomerkey select(mapColumn(",
				"          InvoiceID,",
				"          CustomerID,",
				"          BillToCustomerID,",
				"          OrderID,",
				"          InvoiceDate,",
				"          Quantity,",
				"          UnitPrice,",
				"          TaxRate,",
				"          TaxAmount,",
				"          LineProfit,",
				"          StockItemKey,",
				"          SalespersonKey,",
				"          CustomerKey,",
				"          DeliveryCityID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"GetCityKey select(mapColumn(",
				"          InvoiceID,",
				"          CustomerID,",
				"          BillToCustomerID,",
				"          OrderID,",
				"          InvoiceDate,",
				"          Quantity,",
				"          UnitPrice,",
				"          TaxRate,",
				"          TaxAmount,",
				"          LineProfit,",
				"          StockItemKey,",
				"          SalespersonKey,",
				"          CustomerKey,",
				"          DeliveryCityID,",
				"          CityKey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select5 derive(UnitProfit = LineProfit/Quantity,",
				"          UnitCost = UnitPrice-(LineProfit/Quantity)) ~> addMeasure",
				"dimdate derive(Date = toTimestamp(toString(FullDate, 'yyyy-MM-dd'),'yyyy-MM-dd')) ~> covertDate",
				"select4, dimarea lookup(DeliveryCityID == WWICityID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> GetCityKey",
				"addMeasure, dimdate lookup(InvoiceDate == FullDate,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> GetDateKey",
				"GetDateKey select(mapColumn(",
				"          InvoiceID,",
				"          OrderID,",
				"          InvoiceDate,",
				"          Quantity,",
				"          UnitPrice,",
				"          TaxRate,",
				"          TaxAmount,",
				"          LineProfit,",
				"          StockItemKey,",
				"          SalespersonKey,",
				"          CustomerKey,",
				"          DeliveryCityID,",
				"          CityKey,",
				"          UnitProfit,",
				"          UnitCost,",
				"          DateKey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"select6 keyGenerate(output(SaleKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> GetSaleKey",
				"GetSaleKey sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          SalesID as integer,",
				"          WWI_InvoiceID as integer,",
				"          WWW_CityID as integer,",
				"          SalesPersonID as integer,",
				"          CustomerID as integer,",
				"          StockItemID as integer,",
				"          InvoiceDate as date,",
				"          Quantity as integer,",
				"          UnitPrice as decimal(18,2),",
				"          LineProfit as decimal(18,2),",
				"          TaxRate as decimal(18,2),",
				"          TaxAmount as decimal(18,2),",
				"          UnitProfit as decimal(18,2),",
				"          UnitCost as decimal(18,2)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}